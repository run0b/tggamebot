package main

import (
	"log"
	"time"

	"github.com/davecgh/go-spew/spew"
	tb "gopkg.in/tucnak/telebot.v2"
)

func main() {
	c := CreateConfig()
	b, err := tb.NewBot(tb.Settings{
		Token:  c.TGKey,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})

	if err != nil {
		log.Fatal(err)
		return
	}

	getSticker := func(setName string, n int) (*tb.Sticker, error) {
		set, err := b.GetStickerSet(setName)
		if err != nil {
			log.Println(err)
			return &tb.Sticker{}, err
		}
		sticker := set.Stickers[n]
		return &sticker, nil
	}

	rK1Start := tb.ReplyButton{Text: "–ù–∞—á–∞—Ç—å"}
	rK1Stat := tb.ReplyButton{Text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}
	rK1Info := tb.ReplyButton{Text: "üëÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}
	rK1 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK1Start, rK1Info, rK1Stat},
	}

	rK2Stat := tb.ReplyButton{Text: "–†—É–¥—ã –¥–æ–±—ã—Ç–æ  ‚õè "}
	rK2Kill := tb.ReplyButton{Text: "–£–±–∏–π—Å—Ç–≤–∞ üèπ"}
	rK2Xp := tb.ReplyButton{Text: "–ù–∞–≤—ã–∫–∏ üí±"}
	rK2Money := tb.ReplyButton{Text: "–ë–∞–ª–ª–∞–Ω—Å üí≤"}
	rK2back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	rK2 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK2Stat, rK2Kill, rK2Xp, rK2Money, rK2back},
	}

	rK3Rules := tb.ReplyButton{Text: "–ü—Ä–∞–≤–∏–ª–∞ "}
	rK3Des := tb.ReplyButton{Text: "–û–ø–∏—Å–∞–Ω–∏–µ"}
	rK3Ore := tb.ReplyButton{Text: "–í–∏–¥—ã —Ä—É–¥"}
	rK3Chest := tb.ReplyButton{Text: "–°—É–Ω–¥—É–∫–∏"}
	rK3back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	rK3 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK3Rules, rK3Des, rK3Ore, rK3Chest, rK3back},
	}

	b.Handle(&rK1Stat, func(m *tb.Message) {
		b.Send(m.Sender, ""+m.Sender.FirstName+", –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", &tb.ReplyMarkup{
			ReplyKeyboard:       rK2,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	b.Handle(&rK2back, func(m *tb.Message) {
		b.Send(m.Sender, ""+m.Sender.FirstName+", –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", &tb.ReplyMarkup{
			ReplyKeyboard:       rK1,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	b.Handle(&rK1Info, func(m *tb.Message) {
		b.Send(m.Sender, ""+m.Sender.FirstName+", –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏–≥—Ä—ã", &tb.ReplyMarkup{
			ReplyKeyboard:       rK3,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	b.Handle("/start", func(m *tb.Message) {
		b.Send(m.Sender, m.Sender.FirstName+", –ü—Ä–∏–≤–µ—Ç", &tb.ReplyMarkup{
			ReplyKeyboard:       rK1,
			ResizeReplyKeyboard: true,
		})
		sticker, err := getSticker("Charande", 3)
		if err != nil {
			log.Println(err)
			return
		}
		_, err = b.Send(m.Sender, sticker)
		if err != nil {
			log.Println(err)
			return
		}

		_, err = b.Send(m.Sender, "–†–∞–¥—É–π—Å—è —Ö—É—Ç—å –∫—Ç–æ-—Ç–æ –Ω–∞ —Ç–µ–±—è –¥—Ä–æ—á–∏—Ç.")
		if err != nil {
			log.Println(err)
			return
		}

	})

	b.Handle(tb.OnSticker, func(m *tb.Message) {
		spew.Dump(m)
	})

	b.Start()
}
