package main

import (
	"log"
	"time"

	"github.com/davecgh/go-spew/spew"
	"github.com/lib/pq"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	tb "gopkg.in/tucnak/telebot.v2"
)

func main() {
	log.SetFlags(log.Ldate | log.Ltime | log.Lshortfile)
	localizer := CreateLocale()
	// –ø—Ä–∏–º–µ—Ä –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–Ω–æ–ø–æ–∫
	// fmt.Println(localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "button", TemplateData: map[string]interface{}{"Count": 3}, PluralCount: 3}))

	c := CreateConfig()

	db := CreateDatabase(c)

	b, err := tb.NewBot(tb.Settings{
		Token:  c.TGKey,
		Poller: &tb.LongPoller{Timeout: 10 * time.Second},
	})

	if err != nil {
		log.Fatal(err)
		return
	}

	// getSticker := func(setName string, n int) (*tb.Sticker, error) {
	// 	set, err := b.GetStickerSet(setName)
	// 	if err != nil {
	// 		log.Println(err)
	// 		return &tb.Sticker{}, err
	// 	}
	// 	sticker := set.Stickers[n]
	// 	return &sticker, nil
	// }

	rK1Start := tb.ReplyButton{Text: "–ù–∞—á–∞—Ç—å"}
	rK1Stat := tb.ReplyButton{Text: "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"}
	rK1Info := tb.ReplyButton{Text: "üëÄ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"}
	rK1 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK1Start, rK1Info, rK1Stat},
	}

	rK2Stat := tb.ReplyButton{Text: "–†—É–¥—ã –¥–æ–±—ã—Ç–æ  ‚õè "}
	rK2Kill := tb.ReplyButton{Text: "–£–±–∏–π—Å—Ç–≤–∞ üèπ"}
	rK2Xp := tb.ReplyButton{Text: "–ù–∞–≤—ã–∫–∏ üí±"}
	rK2Money := tb.ReplyButton{Text: "–ë–∞–ª–ª–∞–Ω—Å üí≤"}
	rK2back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	rK2 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK2Stat, rK2Kill, rK2Xp, rK2Money, rK2back},
	}

	rK3Rules := tb.ReplyButton{Text: "–ü—Ä–∞–≤–∏–ª–∞ "}
	rK3Des := tb.ReplyButton{Text: "–û–ø–∏—Å–∞–Ω–∏–µ"}
	rK3Ore := tb.ReplyButton{Text: "–†–µ—Å—É—Ä—Å—ã"}
	rK3Chest := tb.ReplyButton{Text: "–°—É–Ω–¥—É–∫–∏"}
	rK3Class := tb.ReplyButton{Text: "–ö–ª–∞—Å—Å—ã"}
	rK3back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	rK3 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK3Rules, rK3Des, rK3Ore, rK3Chest, rK3Class, rK3back},
	}

	rK5Dig := tb.ReplyButton{Text: "–ö–æ–ø–∞—Ç—å —Ä—É–¥—É"}
	rK5–°hop := tb.ReplyButton{Text: "–†—É–±–∏—Ç—å –¥–µ—Ä–µ–≤–æ"}
	rK5Fight := tb.ReplyButton{Text: "–£–±–∏–≤–∞—Ç—å –º–æ–Ω—Å—Ç—Ä–æ–≤"}
	rK5Bag := tb.ReplyButton{Text: "–°—É–º–∫–∞"}
	rK5back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	rK5 := [][]tb.ReplyButton{
		[]tb.ReplyButton{rK5Dig, rK5–°hop, rK5Fight, rK5Bag, rK5back},
	}

	b.Handle(&rK1Stat, func(m *tb.Message) {
		b.Send(m.Sender, ""+m.Sender.FirstName+", –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—â–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", &tb.ReplyMarkup{
			ReplyKeyboard:       rK2,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	b.Handle(&rK3Ore, func(m *tb.Message) {
		b.Send(m.Sender, localizer.MustLocalize(&i18n.LocalizeConfig{MessageID: "desc"}),
			&tb.ReplyMarkup{
				ReplyKeyboard:       rK3,
				ResizeReplyKeyboard: true,
				// InlineKeyboard: inlineKeys,
			})
	})

	b.Handle(&rK2back, func(m *tb.Message) {
		b.Send(m.Sender, m.Sender.FirstName+", –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É", &tb.ReplyMarkup{
			ReplyKeyboard:       rK1,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	b.Handle(&rK1Info, func(m *tb.Message) {
		b.Send(m.Sender, m.Sender.FirstName+", –¢—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –º–µ—Ö–∞–Ω–∏–∫–æ–π –∏–≥—Ä—ã", &tb.ReplyMarkup{
			ReplyKeyboard:       rK3,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	})

	// rK4Warrior := tb.ReplyButton{Text: "–í–æ–∏–Ω"}
	// rK4Archer := tb.ReplyButton{Text: "–õ—É—á–Ω–∏–∫"}
	// rK4Wizard := tb.ReplyButton{Text: "–í–æ–ª—à–µ–±–Ω–∏–∫"}
	// rK4Paladin := tb.ReplyButton{Text: "–ü–∞–ª–∞–¥–∏–Ω"}

	// rK4back := tb.ReplyButton{Text: "–ù–∞–∑–∞–¥ üîô"}
	// rK4 := [][]tb.ReplyButton{
	// 	[]tb.ReplyButton{rK4Warrior, rK4Archer, rK4Wizard, rK4Paladin, rK4back},
	// }

	var (
		rK4        = &tb.ReplyMarkup{}
		rK4Warrior = rK4.Data("–í–æ–∏–Ω", "warrior")
		rK4Archer  = rK4.Data("–õ—É—á–Ω–∏–∫", "archer")
		rK4Wizard  = rK4.Data("–ú–∞–≥", "wizard")
		rK4Paladin = rK4.Data("–ü–∞–ª–∞–¥–∏–Ω", "paladin")
	)

	rK4.Inline(
		rK4.Row(rK4Warrior),
		rK4.Row(rK4Archer),
		rK4.Row(rK4Wizard),
		rK4.Row(rK4Paladin),
	)

	// b.Handle(tb.OnQuery, func(q *tb.Query) { spew.Dump(q) })

	// b.Handle(&rK4Warrior, func(c *tb.Callback) {
	// 	spew.Dump(c)
	// 	b.Respond(c, &tb.CallbackResponse{})
	// })

	b.Handle(&rK1Start, func(m *tb.Message) {
		class, err := db.GetUserClass(m.Sender.ID)
		if err != nil {
			log.Println(err)
			return
		}

		if class != -1 {
			className := ""
			switch class {
			case 0:
				className = "–í–æ–∏–Ω"
			case 1:
				className = "–õ—É—á–Ω–∏–∫"
			case 2:
				className = "–ú–∞–≥"
			case 3:
				className = "–ü–∞–ª–∞–¥–∏–Ω"
			}
			b.Send(m.Sender, "–í–∞—à –∫–ª–∞—Å—Å "+className, &tb.ReplyMarkup{
				ReplyKeyboard:       rK5,
				ResizeReplyKeyboard: true,
				// InlineKeyboard: inlineKeys,
			})
			return
		}
		b.Send(m.Sender, m.Sender.FirstName+", –í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å,—É—á—Ç–∏—Ç–µ —É –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å —Ä–∞–∑–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ –±–æ–Ω—É—Å—Å—ã", rK4)
	})

	selectClass := func(c *tb.Callback, classID int) {
		class, err := db.GetUserClass(c.Sender.ID)
		if err != nil {
			log.Println(err)
			return
		}

		if class != -1 {
			b.Send(c.Sender, "–°–æ—Å–∏ —Ö—É–π, –∫–ª–∞—Å –∏–∑–º–µ–Ω–∏—Ç—å –Ω–µ–ª—å–∑—è!")
			return
		}

		err = db.SetUserClass(c.Sender.ID, classID)
		if err != nil {
			log.Println(err)
			return
		}

		message := ""
		switch classID {
		case 0:
			message = c.Sender.FirstName + ", –í—ã –≤—ã–±—Ä–∞–ª–∏ –í–æ–∏–Ω–∞"
		case 1:
			message = c.Sender.FirstName + ", –í—ã –≤—ã–±—Ä–∞–ª–∏ –õ—É—á–Ω–∏–∫–∞"
		case 2:
			message = c.Sender.FirstName + ", –í—ã –≤—ã–±—Ä–∞–ª–∏ –ú–∞–≥–∞"
		case 3:
			message = c.Sender.FirstName + ", –í—ã –≤—ã–±—Ä–∞–ª–∏ –ü–∞–ª–∞–¥–∏–Ω–∞"
		}

		b.Send(c.Sender, message, &tb.ReplyMarkup{
			ReplyKeyboard:       rK5,
			ResizeReplyKeyboard: true,
			// InlineKeyboard: inlineKeys,
		})
	}

	b.Handle(&rK4Warrior, func(c *tb.Callback) {
		selectClass(c, 0)
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&rK4Archer, func(c *tb.Callback) {
		selectClass(c, 1)
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&rK4Wizard, func(c *tb.Callback) {
		selectClass(c, 2)
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle(&rK4Paladin, func(c *tb.Callback) {
		selectClass(c, 3)
		b.Respond(c, &tb.CallbackResponse{})
	})

	b.Handle("/start", func(m *tb.Message) {
		err := db.AddUser(m.Chat.ID, m.Chat.FirstName)
		if err != nil {
			e, ok := err.(*pq.Error)
			if !ok || e.Code != "23505" {
				log.Println(err)
				return
			}
		}
		b.Send(m.Sender, m.Sender.FirstName+", –ü—Ä–∏–≤–µ—Ç", &tb.ReplyMarkup{
			ReplyKeyboard:       rK1,
			ResizeReplyKeyboard: true,
		})
		// sticker, err := getSticker("Charande", 3)
		// if err != nil {
		// 	log.Println(err)
		// 	return
		// }
		// _, err = b.Send(m.Sender, sticker)
		// if err != nil {
		// 	log.Println(err)
		// 	return
		// }

		_, err = b.Send(m.Sender, "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∏–≥—Ä—ã —Å–æ–≤–µ—Ç—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∏–≥—Ä–æ–π.\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ")
		if err != nil {
			log.Println(err)
			return
		}

	})

	b.Handle(tb.OnSticker, func(m *tb.Message) {
		spew.Dump(m)
	})

	b.Start()
}
